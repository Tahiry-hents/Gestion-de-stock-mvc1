package com.stock.mvc.dao.impl;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import com.stock.mvc.dao.IEmployeurDAO;
import com.stock.mvc.entites.Employeur;
@SuppressWarnings("unchecked")
public class EmployeurDAOImpl implements IEmployeurDAO {
	
	@PersistenceContext
	EntityManager em;
	

	private Class<Employeur> type;
	

	public EmployeurDAOImpl() {
		super();
		Type f=getClass().getGenericSuperclass();//On récupère la superclasse c'est à dire la classe père
		ParameterizedType pt= (ParameterizedType)f;//On crée l'objet pt en récupérant les paramètres de t
		type= (Class<Employeur>)pt.getActualTypeArguments()[0];
		
	}
	
	

	public EmployeurDAOImpl(EntityManager em, Class<Employeur> type) {
		super();
		this.em = em;
		this.type = type;
	}



	@Override
	public Employeur save(Employeur entity) {
		em.persist(entity);
		return null;
	}

	@Override
	public Employeur update(Employeur entity) {
		// EmployeurODO Auto-generated method stub
		return em.merge(entity);
	}

	@Override
	public List<Employeur> selectAll() {
		Query query=em.createQuery("select t from"+type.getSimpleName()+"t");
		return query.getResultList();
	}

	@Override
	public List<Employeur> selectAll(String sortField, String sort) {
		// EmployeurODO Auto-generated method stub
		return null;
	}

	@Override
	public Employeur getById(Long id) {
		return em.find(type,id);
	}

	@Override
	public void remove(Long id) {
		Employeur tab=em.getReference(type, id);
		em.remove(tab);
		
	}

	@Override
	public Employeur findOne(String paramName, Object[] paramValue) {
		// EmployeurODO Auto-generated method stub
		return null;
	}

	@Override
	public Employeur findOne(String[] paramNames, Object[] paramValues) {
		if (paramNames.length !=paramValues.length) {
		return null;}
		String queryString="select t from"+type.getSimpleName()+"t where";
		int len=paramNames.length;
		for (int i=0;(i<len);i++) { queryString +="e."+paramNames[i]+"=:x"+i;
		if ((i+1)<len) { queryString +="and";}
		}
		Query query = em.createQuery(queryString);
		for (int i=0;(i<paramValues.length);i++) { query.setParameter("x"+i,paramValues[i]);}
		return query.getResultList().size()>0? (Employeur)query.getResultList().get(0): null;
		}
	

	@Override
	public Employeur findOne(String paramName, String paramValues) {
		Query query=em.createQuery("select t from"+type.getSimpleName()+"t where"+paramName+"= :x");
		query.setParameter("x", paramValues);
		return query.getResultList().size()>0? (Employeur)query.getResultList().get(0): null;
		//L'expression précédente équivaut à 
		//if (query.getResultList().size()>0?) {(Employeur)query.getResultList().get(0): null;}
		//else null;
	}

	@Override
	public int findCountBy(String paramName, String paramValues) {//La méthode va retourner le nombre d'éléments contenus dans la liste "type"
		Query query=em.createQuery("select t from"+type.getSimpleName()+"t where"+paramName+"= :x");
		query.setParameter(paramName, paramValues);
		return query.getResultList().size()>0? ((Long)query.getSingleResult()).intValue() :null;
	}

}
